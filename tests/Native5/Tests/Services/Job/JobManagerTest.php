<?php
namespace Native5\Tests\Services\Job;

use Native5\Services\Job\JobManager;
use Native5\Services\Job\Job;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-31 at 22:58:19.
 */
class JobManagerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Native5\Services\Job\JobManager;
     */
    protected $object;

    /**
     * @var Native5\Core\Log\Logger
     */
    protected $_logger;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new JobManager;
        $this->_logger = $GLOBALS['logger'];
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Generated from @assert (null) throws Exception.
     *
     * @covers Native5\Services\Job\JobManager::createJob
     * @expectedException Exception
     */
    public function testCreateJobNegative()
    {
        $this->object->createJob(null);
    }

    /**
     * Generated from @assert (array()) throws Exception.
     *
     * @covers Native5\Services\Job\JobManager::createJob
     * @expectedException Exception
     */
    public function testCreateJobNegative2()
    {
        $this->object->createJob(array());
    }

    /**
     * Generated from @assert (null) throws Exception.
     *
     * @covers Native5\Services\Job\JobManager::getJob
     * @expectedException Exception
     */
    public function testGetJobNegative()
    {
        $this->object->getJob(null);
    }

    /**
     * Generated from @assert (array()) throws Exception.
     *
     * @covers Native5\Services\Job\JobManager::getJob
     * @expectedException Exception
     */
    public function testGetJobNegative2()
    {
        $this->object->getJob(array());
    }

    /**
     * @covers Native5\Services\Job\JobManager::createJob
     */
    public function testCreateJob()
    {
        $this->assertNotEquals(
          null,
          ($jobId = $this->object->createJob("testingJob"))
        );

        $GLOBALS['logger']->info("Created job with id: ".$jobId);

        return $jobId;
    }

    /**
     * @covers Native5\Services\Job\JobManager::getJob
     * @depends testCreateJob
     */
    public function testGetJob($jobId)
    {
        // Get job
        $this->assertNotEquals(
            null,
            ($job = $this->object->getJob($jobId))
        );

        $this->_logger->debug("Got Job: ".print_r($job, 1));

        // Check Status
        $this->assertEquals(
            $job->getStatus(),
            Job::STATUS_CREATED
        );

        // Check State
        $this->assertEquals(
            null,
            $job->getState()
        );

        return $jobId;
    }

    /**
     * @covers Native5\Services\Job\JobManager::updateJobStatus
     * @depends testGetJob
     */
    public function testUpdateJobStatusRunning($jobId)
    {
        // Update job status
        $this->assertEquals(
            true,
            // Update job status to running
            $this->object->updateJobStatus($jobId, Job::STATUS_RUNNING)
        );

        // Get job
        $this->assertNotEquals(
            null,
            ($job = $this->object->getJob($jobId))
        );

        $this->_logger->debug("Got Job: ".print_r($job, 1));

        // Check Status
        $this->assertEquals(
            $job->getStatus(),
            Job::STATUS_RUNNING
        );

        // Check State
        $this->assertEquals(
            null,
            $job->getState()
        );

        return $jobId;
    }

    /**
     * @covers Native5\Services\Job\JobManager::updateJobStatus
     * @depends testUpdateJobStatusRunning
     */
    public function testUpdateJobState($jobId) {
        $this->_updateRunningJobState($jobId, "Ready");

        return $jobId;
    }

    /**
     * @covers Native5\Services\Job\JobManager::updateJobStatus
     * @depends testUpdateJobState
     */
    public function testUpdateJobState2($jobId) {
        $this->_updateRunningJobState($jobId, "Steady");

        return $jobId;
    }

    /**
     * @covers Native5\Services\Job\JobManager::updateJobStatus
     * @depends testUpdateJobState2
     */
    public function testUpdateJobState3($jobId) {
        $this->_updateRunningJobState($jobId, "Go");

        return $jobId;
    }

    private function _updateRunningJobState($jobId, $state) {
        // Update job state
        $this->assertEquals(
            true,
            $this->object->updateJobState($jobId, $state)
        );

        // Get job
        $this->assertNotEquals(
            null,
            ($job = $this->object->getJob($jobId))
        );

        $this->_logger->debug("Got Job: ".print_r($job, 1));

        // Check Status
        $this->assertEquals(
            $job->getStatus(),
            Job::STATUS_RUNNING
        );

        // Check State
        $this->assertEquals(
            $state,
            $job->getState()
        );
    }

    /**
     * @covers Native5\Services\Job\JobManager::setJobResult
     * @depends testUpdateJobState3
     */
    public function testSetJobResult($jobId)
    {
        // Update job result
        $this->assertEquals(
            true,
            $this->object->setJobResult($jobId, array('hello' => 'success'))
        );

        // Get job
        $this->assertNotEquals(
            null,
            ($job = $this->object->getJob($jobId))
        );

        $this->_logger->debug("Got Job: ".print_r($job, 1));

        // Check Status
        $this->assertEquals(
            $job->getStatus(),
            Job::STATUS_RUNNING
        );

        // Check State
        $this->assertEquals(
            "Go",
            $job->getState()
        );

        // Check Result
        $this->assertEquals(
            array("hello" => "success"),
            $job->getResult()
        );

        return $jobId;
    }

    /**
     * @covers Native5\Services\Job\JobManager::setJobResult
     * @depends testSetJobResult
     */
    public function testSetJobResult2($jobId)
    {
        // Update job result
        $this->assertEquals(
            true,
            $this->object->setJobResult($jobId, array('hello' => 'error'))
        );

        // Get job
        $this->assertNotEquals(
            null,
            ($job = $this->object->getJob($jobId))
        );

        $this->_logger->debug("Got Job: ".print_r($job, 1));

        // Check Status
        $this->assertEquals(
            $job->getStatus(),
            Job::STATUS_RUNNING
        );

        // Check State
        $this->assertEquals(
            "Go",
            $job->getState()
        );

        // Check Result
        $this->assertEquals(
            array("hello" => "error"),
            $job->getResult()
        );

        return $jobId;
    }

    /**
     * @covers Native5\Services\Job\JobManager::updateJobStatus
     * @depends testSetJobResult2
     */
    public function testUpdateJobStatusSuccess($jobId)
    {
        // Update job status
        $this->assertEquals(
            true,
            // Update job status to running
            $this->object->updateJobStatus($jobId, Job::STATUS_COMPLETED_SUCCESS)
        );

        // Get job
        $this->assertNotEquals(
            null,
            ($job = $this->object->getJob($jobId))
        );

        $this->_logger->debug("Got Job: ".print_r($job, 1));

        // Check Status
        $this->assertEquals(
            $job->getStatus(),
            Job::STATUS_COMPLETED_SUCCESS
        );

        // Check State
        $this->assertEquals(
            "Go",
            $job->getState()
        );

        // Check Result
        $this->assertEquals(
            array("hello" => "error"),
            $job->getResult()
        );

        return $jobId;
    }

    /**
     * @covers Native5\Services\Job\JobManager::updateJobStatus
     * @depends testUpdateJobStatusSuccess
     */
    public function testUpdateJobStatusNotSuccess($jobId)
    {
        // Update job status
        $this->assertEquals(
            true,
            // Update job status to running
            $this->object->updateJobStatus($jobId, Job::STATUS_COMPLETED_ERROR)
        );

        // Get job
        $this->assertNotEquals(
            null,
            ($job = $this->object->getJob($jobId))
        );

        $this->_logger->debug("Got Job: ".print_r($job, 1));

        // Check Status
        $this->assertEquals(
            $job->getStatus(),
            Job::STATUS_COMPLETED_ERROR
        );

        // Check State
        $this->assertEquals(
            "Go",
            $job->getState()
        );

        // Check Result
        $this->assertEquals(
            array("hello" => "error"),
            $job->getResult()
        );

        return $jobId;
    }

    /**
     * @covers Native5\Services\Job\JobManager::deleteJob
     * @depends testUpdateJobStatusNotSuccess
     */
    public function testDeleteJob($jobId)
    {
        // Delete job
        $this->assertEquals(
            true,
            // Update job status to running
            $this->object->deleteJob($jobId)
        );

        // Get job
        $this->assertEquals(
            null,
            ($job = $this->object->getJob($jobId))
        );

        $this->_logger->debug("Got Job: ".print_r($job, 1));

        return $jobId;
    }

}
